(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('scheduler'), require('react')) :
	typeof define === 'function' && define.amd ? define(['scheduler', 'react'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.ReactDOM = factory(global.scheduler, global.React));
})(this, (function (scheduler, React) { 'use strict';

	function _interopNamespaceDefault(e) {
		var n = Object.create(null);
		if (e) {
			Object.keys(e).forEach(function (k) {
				if (k !== 'default') {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		}
		n.default = e;
		return Object.freeze(n);
	}

	var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

	const FunctionComponent = 0; // FunctionComponent（函数组件）
	const HostRoot = 3; // 根组件 React顶层
	const HostComponent = 5; // 原生组件 div/p/span
	const HostText = 6; // 文本节点
	const Fragment = 7;

	const NoFlags = 0b00000000000000000000000000;
	const Placement = 0b00000000000000000000000010;
	const Update = 0b00000000000000000000000100;
	const ChildDeletion = 0b00000000000000000000010000;
	// useEffect
	const PassiveEffect = 0b00000000000000000000100000; // fiber本次更新存在副作用
	const Ref = 0b00000000000000000001000000;
	const MutationMask = Placement | Update | ChildDeletion | Ref;
	const LayoutMask = Ref;
	const PassiveMask = PassiveEffect | ChildDeletion;

	const ReactCurrentBatchConfig = {
	    transition: null,
	};

	const SyncLane = 0b00001;
	const NoLane = 0b00000;
	const NoLanes = 0b00000;
	const InputContinousLane = 0b00010; //连续的时间 拖拽
	const DefaultLane = 0b00100;
	const TransitionLane = 0b01000;
	function mergeLanes(laneA, laneB) {
	    return laneA | laneB;
	}
	function requestUpdateLane() {
	    const isTransition = ReactCurrentBatchConfig.transition !== null;
	    if (isTransition) {
	        return TransitionLane;
	    }
	    //从上下文环境中获取Scheduler优先级
	    const currentSchedulerPriority = scheduler.unstable_getCurrentPriorityLevel();
	    const lane = schedulerPriorityToLane(currentSchedulerPriority);
	    return lane;
	}
	function getHighestPriorityLane(lanes) {
	    return lanes & -lanes;
	}
	function isSubsetOfLanes(set, subset) {
	    return (set & subset) === subset;
	}
	function markRootFinished(root, lane) {
	    root.pendingLanes &= ~lane;
	}
	function lanesToSchedulerPriority(lanes) {
	    const lane = getHighestPriorityLane(lanes);
	    if (lane === SyncLane) {
	        return scheduler.unstable_ImmediatePriority;
	    }
	    if (lane === InputContinousLane) {
	        return scheduler.unstable_UserBlockingPriority;
	    }
	    if (lane === DefaultLane) {
	        return scheduler.unstable_NormalPriority;
	    }
	    return scheduler.unstable_IdlePriority;
	}
	function schedulerPriorityToLane(schedulerPriority) {
	    if (schedulerPriority === scheduler.unstable_ImmediatePriority) {
	        return SyncLane;
	    }
	    if (schedulerPriority === scheduler.unstable_UserBlockingPriority) {
	        return InputContinousLane;
	    }
	    if (schedulerPriority === scheduler.unstable_NormalPriority) {
	        return DefaultLane;
	    }
	    return NoLane;
	}

	// ReactElement 数据--》 FiberNode 数据+关系 ----> 真实Dom
	// FiberNode
	class FiberNode {
	    type;
	    tag; // 类型标记
	    pendingProps;
	    key;
	    stateNode; // HostRootFiber stateNode指向FiberRootNode/ 类组件为该组件实例/ 原生Dom元素是Dom节点的引用
	    return; // 父亲
	    sibling; // 兄弟
	    child; // 儿子
	    index; // 儿子标号
	    ref;
	    flags; // 操作标记
	    memoizedState;
	    updateQueue;
	    subtreeFlags;
	    memoizedProps;
	    alternate;
	    deletions;
	    constructor(tag, pendingProps, key) {
	        this.tag = tag;
	        this.key = key || null;
	        this.stateNode = null; // (DOM)
	        this.type = null; // (FunctionComponent)
	        // 生成树状结构
	        this.return = null;
	        this.sibling = null;
	        this.child = null;
	        this.index = 0;
	        this.ref = null;
	        // 作为工作单元
	        this.pendingProps = pendingProps;
	        this.memoizedProps = null;
	        this.updateQueue = null;
	        this.memoizedState = null;
	        this.alternate = null;
	        // 副作用
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	        this.deletions = null;
	    }
	}
	// tag  FiberNode属于xx类型节点
	// FiberRootNode        根--》HostRootFiber ---》 app（一代标签）
	class FiberRootNode {
	    container;
	    current;
	    finishedWork; // 指向更新完成的hostRootFiber
	    pendingLanes;
	    finishedLane;
	    pendingPassiveEffects;
	    callbackNode;
	    callbakcPriority;
	    constructor(container, hostRootFiber) {
	        // container 是元素  hostRootFiber
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	        this.pendingLanes = NoLanes;
	        this.finishedLane = NoLane;
	        this.callbackNode = null;
	        this.callbakcPriority = NoLane;
	        this.pendingPassiveEffects = {
	            unmount: [],
	            update: [],
	        };
	    }
	}
	const createWorkInProcess = (current, pendingProps) => {
	    let wip = current.alternate;
	    if (wip === null) {
	        // mount
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        wip.pendingProps = pendingProps;
	        wip.flags = NoFlags;
	        wip.subtreeFlags = NoFlags;
	        wip.deletions = null;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memoizedState = current.memoizedState;
	    wip.memoizedProps = current.memoizedProps;
	    wip.ref = current.ref;
	    // lane?
	    return wip;
	};
	function createFiberFromElement(element) {
	    const { type, key, props, ref } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('为定义的type类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    fiber.ref = ref;
	    return fiber;
	}
	function createFiberFromFragment(element, key) {
	    const fiber = new FiberNode(Fragment, element, key);
	    return fiber;
	}
	// type 属性表示组件节点的类型。对于不同类型的组件或元素，type 可以是以下几种取值：
	// 函数组件：函数本身，即函数组件的定义。
	// 类组件：类本身，即组件的构造函数。
	// 原生 DOM 元素：字符串，表示对应的 HTML 标签名称。
	// tag 属性表示 Fiber 节点的标记信息，用于指示该节点的特定类型和状态，如：
	// HostComponent：原生 DOM 元素节点。
	// ClassComponent：类组件节点。
	// FunctionComponent：函数组件节点。
	// HostRoot：根节点。
	// HostText：文本节点。
	// tag 属性更多地用于标识节点的内部类型和处理逻辑，而 type 属性则更加关注组件节点的具体类型。它们在 React 的协调和渲染过程中扮演着不同的角色

	// 创建更新操作
	const createUpdate = (action, lane) => {
	    return {
	        action,
	        next: null,
	        lane,
	    };
	};
	const createUpdateQueue = () => {
	    // 创建更新队列
	    return {
	        shared: {
	            pending: null,
	        },
	        dispatch: null,
	    };
	};
	// 添加更新操作
	const enqueueUpdate = (updateQueue, update) => {
	    const pending = updateQueue.shared.pending;
	    if (pending === null) {
	        update.next = update;
	        // pending = a-> a
	        // pending =  b -> a ->b
	        // pending = c-> b -> a -> c
	    }
	    else {
	        update.next = pending.next;
	        pending.next = update;
	    }
	    updateQueue.shared.pending = update;
	};
	// 消费更新操作
	const processUpdataQueue = (baseState, pendingUpdate, renderLane) => {
	    const result = {
	        memoizedState: baseState,
	        baseState,
	        baseQueue: null,
	    };
	    if (pendingUpdate !== null) {
	        //第一个update
	        const first = pendingUpdate.next;
	        let pending = pendingUpdate.next;
	        let newBaseState = baseState;
	        let newBaseQueueFirst = null;
	        let newBaseQueueLast = null;
	        let newState = baseState;
	        do {
	            const updateLane = pending.lane;
	            if (!isSubsetOfLanes(renderLane, updateLane)) {
	                // 优先级不够 被跳过
	                const clone = createUpdate(pending.action, pending.lane);
	                //是不是第一个被跳过的
	                if (newBaseQueueFirst === null) {
	                    newBaseQueueFirst = clone;
	                    newBaseQueueLast = clone;
	                    newBaseState = newState;
	                }
	                else {
	                    newBaseQueueLast.next = clone;
	                    newBaseQueueLast = clone;
	                }
	            }
	            else {
	                //优先级足够
	                if (newBaseQueueLast !== null) {
	                    const clone = createUpdate(pending.action, NoLane);
	                    newBaseQueueLast.next = clone;
	                    newBaseQueueLast = clone;
	                }
	                const action = pending.action;
	                if (action instanceof Function) {
	                    newState = action(baseState);
	                }
	                else {
	                    newState = action;
	                }
	            }
	            pending = pending.next;
	        } while (pending !== first);
	        if (newBaseQueueLast === null) {
	            //本次计算没有update被跳过
	            newBaseState = newState;
	        }
	        else {
	            newBaseQueueLast.next = newBaseQueueFirst;
	        }
	        result.memoizedState = newState;
	        result.baseState = newBaseState;
	        result.baseQueue = newBaseQueueLast;
	    }
	    return result;
	};

	const elementPropsKey = '__props';
	const validEventTypeList = ['click'];
	function updateFiberProps(node, props) {
	    node[elementPropsKey] = props;
	}
	// 一个典型的事件代理
	function initEvent(container, eventType) {
	    if (!validEventTypeList.includes(eventType)) {
	        console.warn('当前不支持', eventType, '事件');
	        return;
	    }
	    {
	        console.log('初始化事件:', eventType);
	    }
	    container.addEventListener(eventType, (e) => {
	        dispatchEvent(container, eventType, e);
	    });
	}
	function createSyntheticEvent(e) {
	    const SyntheticEvent = e;
	    SyntheticEvent.__stopPropagation = false;
	    const originStopPropagation = e.stopPropagation;
	    SyntheticEvent.stopPropagation = () => {
	        SyntheticEvent.__stopPropagation = true;
	        if (originStopPropagation) {
	            originStopPropagation();
	        }
	    };
	    return SyntheticEvent;
	}
	function dispatchEvent(container, eventType, e) {
	    const targetElement = e.target;
	    if (targetElement === null) {
	        console.warn('事件不存在target', e);
	        return;
	    }
	    //收集沿途的事件
	    const { bubble, capture } = collectPaths(targetElement, container, eventType);
	    //构造合成事件
	    const se = createSyntheticEvent(e);
	    // 遍历capture
	    triggerEventFlow(capture, se);
	    if (!se.__stopPropagation) {
	        // 遍历bubble
	        triggerEventFlow(bubble, se);
	    }
	}
	function triggerEventFlow(paths, se) {
	    for (let i = 0; i < paths.length; i++) {
	        const callback = paths[i];
	        scheduler.unstable_runWithPriority(eventTypeToSchdulerPriority(se.type), () => {
	            callback.call(null, se);
	        });
	        if (se.__stopPropagation) {
	            break;
	        }
	    }
	}
	// 统一处理所有click 和 clickCaputure所控制的事件  捕获阶段调用层级高的 冒泡阶段只调用层级低的， 这里的捕获和冒泡分别对应的是不同的事件 请分开来理解，他并不是一个事件的两个流程 而是两个事件
	function getEventCallbackNameFromEventType(eventType) {
	    return {
	        click: ['onClickCapture', 'onClick'],
	    }[eventType];
	}
	function collectPaths(targetElement, container, eventType) {
	    const paths = {
	        capture: [],
	        bubble: [],
	    };
	    while (targetElement && targetElement !== container) {
	        //收集
	        const elementProps = targetElement[elementPropsKey];
	        if (elementProps) {
	            const callbackNameList = getEventCallbackNameFromEventType(eventType);
	            if (callbackNameList) {
	                callbackNameList.forEach((callbackName, i) => {
	                    const eventCallback = elementProps[callbackName];
	                    if (eventCallback) {
	                        if (i == 0) {
	                            paths.capture.unshift(eventCallback);
	                        }
	                        else {
	                            paths.bubble.push(eventCallback);
	                        }
	                    }
	                });
	            }
	        }
	        targetElement = targetElement.parentNode;
	    }
	    return paths;
	}
	function eventTypeToSchdulerPriority(eventType) {
	    switch (eventType) {
	        case 'click':
	        case 'keydown':
	        case 'keyup':
	            return scheduler.unstable_ImmediatePriority;
	        case 'scroll':
	            return scheduler.unstable_UserBlockingPriority;
	        default:
	            return scheduler.unstable_NormalPriority;
	    }
	}
	// react18的事件系统是一个怎样的架构思路
	//   事件代理*
	//  使用方法一定还是 希望在节点中通过标签去使事件可以产生生效 避免手动监听
	//  缺少的手动监听该怎么实现呢
	//  我们要实现的是事件的触发，及点击之后事件可以正确的被触发
	//  那我改在什么时候触发这些函数  当click事件发生的时候 （在根节点可以监听doc  找到被触发的节点）
	//  因为公用一个根节点  所以我只需要拿到当前事件触发的位置 然后往上遍历 就可以得到沿途中被触发的节点
	//   问题的关键在  1. 拿到要被触发的事件  2.代理  doc根代理 事件发生 就能获取到target 通过target拿到沿途中被调用的方法

	const createInstance = (type, props) => {
	    const element = document.createElement(type);
	    updateFiberProps(element, props);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	    console.log(parent);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = (parent, child) => {
	    child.appendChild(parent);
	    console.log(parent);
	};
	function commitUpdate(fiber) {
	    switch (fiber.tag) {
	        case HostText:
	            const text = fiber.memoizedProps?.content;
	            return commitTextUpdate(fiber.stateNode, text);
	        case HostComponent:
	            break;
	        default:
	            {
	                console.warn('未实现的Update类型', fiber);
	            }
	            break;
	    }
	}
	function commitTextUpdate(textInstance, content) {
	    textInstance.textContent = content;
	}
	function removeChild(child, container) {
	    container.removeChild(child);
	}
	function insertChildToContainer(child, container, before) {
	    container.insertBefore(child, before);
	}
	const scheduleMicroTask = typeof queueMicrotask === 'function'
	    ? queueMicrotask
	    : typeof Promise === 'function'
	        ? (callback) => Promise.resolve(null).then(callback)
	        : setTimeout;

	// $$typeof是独一无二的值，所以我们这里使用Symbols
	const supportSymbol = typeof Symbol === 'function' && Symbol;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;
	const REACT_FRAGMENT_TYPE = supportSymbol
	    ? Symbol.for('react.fragment')
	    : 0xeacb;

	function ChildReconciler(shouldTrackEffect) {
	    function deleteChild(returnFiber, childToDelete) {
	        if (!shouldTrackEffect) {
	            return;
	        }
	        const deletions = returnFiber.deletions;
	        if (deletions === null) {
	            returnFiber.deletions = [childToDelete];
	            returnFiber.flags |= ChildDeletion; // 这里我有疑惑 为什么不在删除的元素傻瓜添加ChildDeletion
	        }
	        else {
	            deletions.push(childToDelete);
	        }
	    }
	    function deleteRemainingChildren(returnFiber, currentFirstChild) {
	        if (!shouldTrackEffect) {
	            return;
	        }
	        let childToDelete = currentFirstChild;
	        while (childToDelete !== null) {
	            deleteChild(returnFiber, childToDelete);
	            childToDelete = childToDelete.sibling;
	        }
	    }
	    function reconcileSingleElement(returnFiber, currentFiber, element) {
	        const key = element.key;
	        while (currentFiber !== null) {
	            if (currentFiber.key === key) {
	                // key相同
	                if (element.$$typeof === REACT_ELEMENT_TYPE) {
	                    if (currentFiber.type === element.type) {
	                        let props = element.props;
	                        if (element.type === REACT_FRAGMENT_TYPE) {
	                            props = element.props.children;
	                        }
	                        // type相同
	                        const existing = useFiber(currentFiber, props);
	                        existing.return = returnFiber;
	                        // 当前节点可复用 标记剩下的节点删除
	                        deleteRemainingChildren(returnFiber, currentFiber.sibling);
	                        return existing;
	                    }
	                    // key 相同 type不同 删掉所有旧的
	                    deleteRemainingChildren(returnFiber, currentFiber.sibling);
	                    break;
	                }
	                else {
	                    //key不同  删掉旧的
	                    deleteChild(returnFiber, currentFiber);
	                    currentFiber = currentFiber.sibling;
	                    {
	                        console.warn('还未实现的react类型', element);
	                        break;
	                    }
	                }
	            }
	            else {
	                // 删掉旧的
	                deleteChild(returnFiber, currentFiber);
	            }
	        }
	        // 根据element 创建Fiber并返回
	        let fiber;
	        if (element.type === REACT_ELEMENT_TYPE) {
	            fiber = createFiberFromFragment(element.props.children, key);
	        }
	        else {
	            fiber = createFiberFromElement(element);
	        }
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        while (currentFiber !== null) {
	            // update
	            if (currentFiber.tag === HostText) {
	                // 类型没变 可以复用
	                const existing = useFiber(currentFiber, { content });
	                existing.return = returnFiber;
	                deleteRemainingChildren(returnFiber, currentFiber.sibling);
	                return existing;
	            }
	            deleteChild(returnFiber, currentFiber);
	            currentFiber = currentFiber.sibling;
	        }
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function placeSingleChild(fiber) {
	        if (shouldTrackEffect && fiber.alternate === null) {
	            // 首次渲染
	            fiber.flags |= Placement;
	            console.log(fiber.flags);
	        }
	        return fiber;
	    }
	    function reconcileChildrenArray(returnFiber, currentFirstChild, newChild) {
	        // 最后一个可复用的	fiber在current中的index
	        let lastPlacedIndex = 0;
	        //创建最后一个fiber
	        let lastNewFiber = null;
	        //创建第一个fiber
	        let fistNewFiber = null;
	        // 1  将current 保存在map中
	        const existingChildren = new Map();
	        let current = currentFirstChild;
	        while (current !== null) {
	            const keyToUse = current.key !== null ? current.key : current.index;
	            existingChildren.set(keyToUse, current);
	            current = current.sibling;
	        }
	        for (let i = 0; i < newChild.length; i++) {
	            // 2 遍历newChild 寻找是否可复用
	            const after = newChild[i];
	            const newFiber = updateFormMap(returnFiber, existingChildren, i, after);
	            if (newFiber === null) {
	                continue;
	            }
	            // 3 标记移动还是插入
	            newFiber.index = i;
	            newFiber.return = returnFiber;
	            if (lastNewFiber === null) {
	                lastNewFiber = newFiber;
	                fistNewFiber = newFiber;
	            }
	            else {
	                lastNewFiber.sibling = newFiber;
	                lastNewFiber = lastNewFiber.sibling;
	            }
	            if (!shouldTrackEffect) {
	                continue;
	            }
	            const current = newFiber.alternate;
	            if (current !== null) {
	                const oldIndex = current.index;
	                if (oldIndex < lastPlacedIndex) {
	                    //移动
	                    newFiber.flags |= Placement;
	                    continue;
	                }
	                else {
	                    // 不移动
	                    lastPlacedIndex = oldIndex;
	                }
	            }
	            else {
	                // mount
	                newFiber.flags |= Placement;
	            }
	        }
	        // 4. 将Map中剩下的标记为删除
	        existingChildren.forEach((fiber) => {
	            deleteChild(returnFiber, fiber);
	        });
	        return fistNewFiber;
	    }
	    function updateFormMap(returnFiber, existingChildren, index, element) {
	        const keyToUse = element.key !== null ? element.key : index;
	        const before = existingChildren.get(keyToUse);
	        // hostText
	        if (typeof element === 'string' || typeof element === 'number') {
	            // HostText
	            if (before) {
	                if (before.tag === HostText) {
	                    existingChildren.delete(keyToUse);
	                    return useFiber(before, { content: element + '' });
	                }
	            }
	            return new FiberNode(HostText, { content: element + '' }, null);
	        }
	        // ReactElement
	        if (typeof element === 'object' && element !== null) {
	            switch (element.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    if (element.type === REACT_FRAGMENT_TYPE) {
	                        return updateFragment$1(returnFiber, before, element, keyToUse, existingChildren);
	                    }
	                    if (before) {
	                        if (before.type === element.type) {
	                            existingChildren.delete(keyToUse);
	                            return useFiber(before, element.props);
	                        }
	                    }
	                    return createFiberFromElement(element);
	            }
	            // TODO 数组类型
	            if (Array.isArray(element) && true) {
	                console.warn('还未实现数组类型的child');
	            }
	        }
	        if (Array.isArray(element)) {
	            return updateFragment$1(returnFiber, before, element, keyToUse, existingChildren);
	        }
	        return null;
	    }
	    return function reconcilerChildFibers(returnFiber, currentFiber, newChild) {
	        //判断当前的Fiber类型
	        //判断Fragment
	        const isUnkeyedTopLevelFragment = typeof newChild === 'object' &&
	            newChild !== null &&
	            newChild.type === REACT_FRAGMENT_TYPE &&
	            newChild.key === null;
	        if (isUnkeyedTopLevelFragment) {
	            newChild = newChild?.props.children;
	        }
	        // TODO 多节点的情况 ul> li*3
	        if (Array.isArray(newChild)) {
	            return reconcileChildrenArray(returnFiber, currentFiber, newChild);
	        }
	        // 判断单节点情况
	        if (typeof newChild === 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('为实现的reconcile类型', newChild);
	                    }
	            }
	        }
	        // HostText
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        // 兜底删除
	        if (currentFiber !== null) {
	            deleteRemainingChildren(returnFiber, currentFiber);
	        }
	        {
	            console.warn('未实现的reconcile类型', newChild);
	        }
	        return null;
	    };
	}
	function useFiber(fiber, pendingProps) {
	    const clone = createWorkInProcess(fiber, pendingProps);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	}
	function updateFragment$1(returnFiber, current, elements, key, existingChildren) {
	    let fiber;
	    if (!current || current.tag !== Fragment) {
	        fiber = createFiberFromFragment(elements, key);
	    }
	    else {
	        existingChildren.delete(key);
	        fiber = useFiber(current, elements);
	    }
	    fiber.return = returnFiber;
	    return fiber;
	}
	const reconcileChildFibers = ChildReconciler(true);
	const mountChildFibers = ChildReconciler(false);

	const internals = React__namespace.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	const Passive = 0b0010; // useEffect对应的Effect
	const HookHasEffect = 0b0001; // 当前Effect存在副作用

	let currentlyRenderingFiber = null; // 当前的fiber树
	let workInProgressHook = null; //挂载时操作的Hook
	let currentHook = null; // 更新时候的当前hook
	let renderLane = NoLane;
	const { currentDispatcher } = internals;
	function renderWithHooks(wip, lane) {
	    // 赋值操作
	    currentlyRenderingFiber = wip; //等下要通过currentlyRenderingFiber判断所在环境是否为函数环境
	    // 重置hooks链表
	    wip.memoizedState = null;
	    // 重置 effect 链表
	    wip.updateQueue = [];
	    renderLane = lane;
	    if (wip.alternate !== null) {
	        // update
	        currentDispatcher.current = HooksDispatcherOnUpdate;
	    }
	    else {
	        // mount
	        currentDispatcher.current = HooksDispatcherOnMount;
	    }
	    const Component = wip.type;
	    const props = wip.pendingProps;
	    const children = Component(props);
	    // 重置操作
	    currentlyRenderingFiber = null;
	    workInProgressHook = null;
	    currentHook = null;
	    renderLane = NoLane;
	    return children;
	}
	const HooksDispatcherOnMount = {
	    useState: mountState,
	    useEffect: mountEffect,
	    useTransition: mountTransition,
	    useRef: mountRef,
	};
	const HooksDispatcherOnUpdate = {
	    useState: updateState,
	    useEffect: updateEffect,
	    useTransition: updateTransition,
	    useRef: updateRef,
	};
	function mountEffect(create, deps) {
	    const hook = mountWorkInProgressHook();
	    const nextDeps = deps === undefined ? null : deps;
	    currentlyRenderingFiber.flags |= PassiveEffect;
	    hook.memoizedState = pushEffect(Passive | HookHasEffect, create, undefined, nextDeps);
	}
	function updateEffect(create, deps) {
	    const hook = updateWorkInProgressHook();
	    const nextDeps = deps === undefined ? null : deps;
	    let destory;
	    if (currentHook !== null) {
	        const prevEffect = currentHook.memoizedState;
	        destory = prevEffect.destory;
	        if (nextDeps !== null) {
	            // 浅比较依赖
	            const prevDeps = prevEffect.deps;
	            if (areHookInputsEqual(nextDeps, prevDeps)) {
	                hook.memoizedState = pushEffect(Passive, create, destory, nextDeps);
	                return;
	            }
	        }
	        // 浅比较不相等
	        currentlyRenderingFiber.flags |= PassiveEffect;
	        hook.memoizedState = pushEffect(Passive | PassiveEffect, // 执行副作用
	        create, destory, nextDeps);
	    }
	}
	function areHookInputsEqual(nextDeps, prevDeps) {
	    if (prevDeps === null || nextDeps === null) {
	        return false;
	    }
	    for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
	        if (Object.is(prevDeps[i], nextDeps[i])) {
	            continue;
	        }
	        return false;
	    }
	    return true;
	}
	function pushEffect(hookFlags, create, destory, deps) {
	    const effect = {
	        tag: hookFlags,
	        create,
	        destory,
	        deps,
	        next: null,
	    };
	    const fiber = currentlyRenderingFiber;
	    const updateQueue = fiber.updateQueue;
	    if (updateQueue === null) {
	        const updateQueue = createFCUpdateQueue();
	        fiber.updateQueue = updateQueue;
	        effect.next = effect;
	        updateQueue.lastEffect = effect;
	    }
	    else {
	        //插入effect
	        if (!updateQueue.lastEffect) {
	            updateQueue.lastEffect = null;
	        }
	        const lastEffect = updateQueue.lastEffect;
	        if (lastEffect === null) {
	            effect.next = effect;
	            updateQueue.lastEffect = effect;
	        }
	        else {
	            const firstEffect = lastEffect.next;
	            lastEffect.next = effect;
	            effect.next = firstEffect;
	            updateQueue.lastEffect = effect;
	        }
	    }
	    return effect;
	}
	function createFCUpdateQueue() {
	    const updateQueue = createUpdateQueue();
	    updateQueue.lastEffect = null;
	    return updateQueue;
	}
	function updateState(initialState) {
	    // 找到当前useState对应的hook数据
	    const hook = updateWorkInProgressHook();
	    // 计算新state的逻辑
	    const queue = hook.updateQueue;
	    const baseState = hook.baseState;
	    const pending = queue.shared.pending;
	    const current = currentHook;
	    let baseQueue = current.baseQueue;
	    if (pending !== null) {
	        //pending  baseQueue update保存在current中
	        if (baseQueue !== null) {
	            const baseFirst = baseQueue.next;
	            const pendingFirst = pending.next;
	            baseQueue.next = pendingFirst;
	            pending.next = baseFirst;
	        }
	        baseQueue = pending;
	        //保存在current中
	        current.baseQueue = pending;
	        queue.shared.pending = null;
	    }
	    if (baseQueue !== null) {
	        const { memoizedState, baseQueue: newBaseQueue, baseState: newBaseState, } = processUpdataQueue(baseState, baseQueue, renderLane);
	        hook.memoizedState = memoizedState;
	        hook.baseState = newBaseState;
	        hook.baseQueue = newBaseQueue;
	    }
	    return [hook.memoizedState, queue.dispatch];
	}
	function mountState(initialState) {
	    //
	    const hook = mountWorkInProgressHook();
	    let memoizedState;
	    if (initialState instanceof Function) {
	        memoizedState = initialState();
	    }
	    else {
	        memoizedState = initialState;
	    }
	    const queue = createUpdateQueue();
	    hook.updateQueue = queue;
	    hook.memoizedState = memoizedState;
	    hook.baseState = memoizedState;
	    // @ts-ignore
	    const dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
	    queue.dispatch = dispatch;
	    return [memoizedState, dispatch];
	}
	function mountRef(initialValue) {
	    const hook = mountWorkInProgressHook();
	    const ref = { current: initialValue };
	    hook.memoizedState = ref;
	    return ref;
	}
	function updateRef(initialValue) {
	    const hook = updateWorkInProgressHook();
	    const ref = { current: initialValue };
	    hook.memoizedState = ref;
	    return hook.memoizedState;
	}
	function mountTransition() {
	    const [isPending, setPending] = mountState(false);
	    const hook = mountWorkInProgressHook();
	    const start = startTransition.bind(null, setPending);
	    hook.memoizedState = start;
	    return [isPending, start];
	}
	function updateTransition() {
	    const [isPending] = updateState();
	    const hook = updateWorkInProgressHook();
	    const start = hook.memoizedState;
	    return [isPending, start];
	}
	function startTransition(setPending, callback) {
	    setPending(true);
	    const preTransition = ReactCurrentBatchConfig.transition;
	    ReactCurrentBatchConfig.transition = 1;
	    callback();
	    setPending(false);
	    ReactCurrentBatchConfig.transition = preTransition;
	}
	function dispatchSetState(fiber, updateQueue, action) {
	    const lane = requestUpdateLane();
	    const update = createUpdate(action, lane);
	    enqueueUpdate(updateQueue, update);
	    scheduleUpdateOnFiber(fiber, lane);
	}
	function updateWorkInProgressHook() {
	    // TODO render阶段触发的更新
	    let nextCurrentHook;
	    if (currentHook === null) {
	        // 这是这个FC update时候的第一个hook
	        const current = currentlyRenderingFiber?.alternate; // 上一次操作时拿到的fiber
	        if (current !== null) {
	            nextCurrentHook = current?.memoizedState;
	        }
	        else {
	            nextCurrentHook = null;
	        }
	    }
	    else {
	        // 这个FCupdate时 后续的hook
	        nextCurrentHook = currentHook.next;
	    }
	    if (nextCurrentHook === null) {
	        throw new Error(`组件${currentlyRenderingFiber?.type}本次执行时候的Hook比上次执行的多`);
	    }
	    currentHook = nextCurrentHook;
	    const newHook = {
	        memoizedState: currentHook.memoizedState,
	        updateQueue: currentHook.updateQueue,
	        next: null,
	        baseQueue: currentHook.baseQueue,
	        baseState: currentHook.baseState,
	    };
	    if (workInProgressHook == null) {
	        if (currentlyRenderingFiber === null) {
	            throw new Error('请在函数组件内调用hook');
	        }
	        else {
	            workInProgressHook = newHook;
	            currentlyRenderingFiber.memoizedState = workInProgressHook;
	        }
	    }
	    else {
	        // mount时 后续的hook
	        workInProgressHook.next = newHook;
	        workInProgressHook = newHook;
	    }
	    return workInProgressHook;
	}
	function mountWorkInProgressHook() {
	    const hook = {
	        memoizedState: null,
	        updateQueue: null,
	        next: null,
	        baseQueue: null,
	        baseState: null,
	    };
	    if (workInProgressHook == null) {
	        if (currentlyRenderingFiber === null) {
	            throw new Error('请在函数组件内调用hook');
	        }
	        else {
	            workInProgressHook = hook;
	            currentlyRenderingFiber.memoizedState = workInProgressHook;
	        }
	    }
	    else {
	        // mount时 useState后续的hook
	        workInProgressHook.next = hook;
	        workInProgressHook = hook;
	    }
	    return workInProgressHook;
	}

	// 递归阶段中的递阶段
	const beginWork = (wip, renderLane) => {
	    // 比较,返回子fiberNode
	    switch (wip.tag) {
	        case HostRoot:
	            return updateHostRoot(wip, renderLane);
	        case HostComponent:
	            return updateHostComponent(wip);
	        case HostText:
	            return null;
	        case FunctionComponent:
	            return updateFunctionComponent(wip, renderLane);
	        case Fragment:
	            return updateFragment(wip);
	        default:
	            {
	                console.warn('beginWork未实现的类型');
	            }
	    }
	    return null;
	};
	function updateFragment(wip) {
	    const nextChildren = wip.pendingProps;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateFunctionComponent(wip, renderLane) {
	    const nextChildren = renderWithHooks(wip, renderLane); // 修改
	    reconcileChildren(wip, nextChildren); // 返回子FiberNode
	    return wip.child;
	}
	function updateHostRoot(wip, renderLane) {
	    const baseState = wip.memoizedState;
	    const updateQueue = wip.updateQueue;
	    const pending = updateQueue.shared.pending;
	    updateQueue.shared.pending = null;
	    const { memoizedState } = processUpdataQueue(baseState, pending, renderLane);
	    // null
	    wip.memoizedState = memoizedState;
	    const nextChildren = wip.memoizedState;
	    reconcileChildren(wip, nextChildren); // 返回子FiberNode
	    return wip.child;
	}
	function updateHostComponent(wip) {
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children; // 修改
	    markRef$1(wip.alternate, wip);
	    reconcileChildren(wip, nextChildren); // 返回子FiberNode
	    return wip.child;
	}
	function reconcileChildren(wip, children) {
	    const current = wip.alternate;
	    // current是hostRootFiber
	    if (current !== null) {
	        //注意 初始化mount的时候 FIberRootNode节点是进入的该种状况
	        // update
	        wip.child = reconcileChildFibers(wip, current?.child, children);
	    }
	    else {
	        // mount
	        wip.child = mountChildFibers(wip, null, children);
	    }
	}
	function markRef$1(current, workInProgress) {
	    const ref = workInProgress.ref;
	    if ((current === null && ref !== null) ||
	        (current !== null && current.ref !== ref)) {
	        workInProgress.flags |= Ref;
	    }
	}

	let nextEffect = null;
	const commitEffects = (phrase, mask, callback) => {
	    return (finishedWork, root) => {
	        nextEffect = finishedWork;
	        while (nextEffect !== null) {
	            const child = nextEffect.child;
	            if ((nextEffect.subtreeFlags & (MutationMask | PassiveMask)) !== NoFlags &&
	                child !== null) {
	                nextEffect = child;
	            }
	            else {
	                // 向上遍历 DFS
	                up: while (nextEffect !== null) {
	                    callback(nextEffect, root); // 思考 这里不会重复处理同一个节点么  父节点，父节点下面的节点 可能会同时操作
	                    const sibling = nextEffect.sibling;
	                    if (sibling !== null) {
	                        // 这个属于什么情况
	                        nextEffect = sibling;
	                        break up;
	                    }
	                    nextEffect = nextEffect.return;
	                }
	            }
	        }
	    };
	};
	const commitMutationEffectsOnFiber = (finishedWork, root) => {
	    const { flags, tag } = finishedWork;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        finishedWork.flags &= ~Placement;
	    }
	    // flags ChildDelete
	    if ((flags & ChildDeletion) !== NoFlags) {
	        const deletions = finishedWork.deletions;
	        if (deletions !== null) {
	            deletions.forEach((ChildToDelete) => {
	                commitDeletion(ChildToDelete, root);
	            });
	        }
	        finishedWork.flags &= ~ChildDeletion;
	    }
	    // flags Update
	    if ((flags & Update) !== NoFlags) {
	        commitUpdate(finishedWork);
	        finishedWork.flags &= ~Update;
	    }
	    if ((flags & PassiveEffect) !== NoFlags) {
	        // 收集回调
	        commitPassiveEffect(finishedWork, root, 'update');
	        finishedWork.flags &= ~PassiveEffect;
	    }
	    if ((flags & Ref) !== NoFlags && tag === HostComponent) {
	        //
	        safelyDetachRef(finishedWork);
	    }
	};
	function safelyDetachRef(current) {
	    const ref = current.ref;
	    if (ref !== null) {
	        if (typeof ref === 'function') {
	            ref(null);
	        }
	        else {
	            ref.current = null;
	        }
	    }
	}
	const commitLayoutEffectsOnFiber = (finishedWork, root) => {
	    const { flags, tag } = finishedWork;
	    if ((flags & Ref) !== NoFlags && tag === HostComponent) {
	        // 绑定新的ref
	        safelyAttachRef(finishedWork);
	        finishedWork.flags &= ~Ref;
	    }
	};
	function safelyAttachRef(fiber) {
	    const ref = fiber.ref;
	    if (ref !== null) {
	        const instance = fiber.stateNode;
	        if (typeof ref === 'function') {
	            ref(instance);
	        }
	        else {
	            ref.current = instance;
	        }
	    }
	}
	const commitMutationEffects = commitEffects('mutation', MutationMask | PassiveMask, commitMutationEffectsOnFiber);
	const commitLayoutEffects = commitEffects('layout', LayoutMask, commitLayoutEffectsOnFiber);
	function commitPassiveEffect(fiber, root, type) {
	    // update  unmount
	    if (fiber.tag !== FunctionComponent ||
	        (type === 'update' && (fiber.flags & PassiveEffect) === NoFlags)) {
	        return;
	    }
	    const updateQueue = fiber.updateQueue;
	    if (updateQueue !== null) {
	        if (updateQueue.lastEffect === null && true) {
	            console.error('当FC存在PassiveEffect flag时，不应该不存在effect');
	        }
	        root.pendingPassiveEffects[type].push(updateQueue.lastEffect);
	    }
	}
	function commitHookEffectList(flags, lastEffect, callback) {
	    let effect = lastEffect.next;
	    do {
	        if ((effect.tag & flags) === flags) {
	            callback(effect);
	        }
	        effect = effect.next;
	    } while (effect !== lastEffect.next);
	}
	function commitHookEffectListUnmount(flags, lastEffect) {
	    commitHookEffectList(flags, lastEffect, (effect) => {
	        const destory = effect.destory;
	        if (typeof destory === 'function') {
	            destory();
	        }
	        effect.tag &= ~HookHasEffect;
	    });
	}
	function commitHookEffectListDestory(flags, lastEffect) {
	    commitHookEffectList(flags, lastEffect, (effect) => {
	        const destory = effect.destory;
	        if (typeof destory === 'function') {
	            destory();
	        }
	        effect.tag &= ~HookHasEffect;
	    });
	}
	function commitHookEffectListCreate(flags, lastEffect) {
	    commitHookEffectList(flags, lastEffect, (effect) => {
	        const create = effect.create;
	        if (typeof create === 'function') {
	            effect.destory = create();
	        }
	    });
	}
	function recordHostChildrenToDelete(childrenToDelete, unmountFiber) {
	    //1  找到第一个 root host 节点
	    const lastOne = childrenToDelete[childrenToDelete.length - 1];
	    if (!lastOne) {
	        childrenToDelete.push(unmountFiber);
	    }
	    else {
	        let node = lastOne.sibling;
	        while (node !== null) {
	            if (unmountFiber === node) {
	                childrenToDelete.push(unmountFiber);
	            }
	            node = node.sibling;
	        }
	    }
	    // 2 每找到一个host节点 判断下 这个节点是不是 1 找到那个节点的兄弟节点
	}
	function commitDeletion(ChildToDelete, root) {
	    const rootChildrenToDelete = [];
	    // 递归子树
	    commitNestedComponent(ChildToDelete, (unmountFiber) => {
	        switch (unmountFiber.tag) {
	            case HostComponent:
	                recordHostChildrenToDelete(rootChildrenToDelete, unmountFiber);
	                // 解绑ref
	                safelyDetachRef(unmountFiber);
	                return;
	            case HostText:
	                recordHostChildrenToDelete(rootChildrenToDelete, unmountFiber);
	                return;
	            case FunctionComponent:
	                // TODO useEffect unmount\ 解绑ref
	                safelyDetachRef(unmountFiber);
	                commitPassiveEffect(unmountFiber, root, 'unmount');
	                return;
	            default:
	                {
	                    console.warn('未处理的ummount类型');
	                }
	                break;
	        }
	    });
	    // 移除 rootHostNode的DOM
	    if (rootChildrenToDelete.length) {
	        const hostParent = getHostParent(ChildToDelete);
	        if (hostParent !== null) {
	            rootChildrenToDelete.forEach((node) => {
	                removeChild(node.stateNode, hostParent);
	            });
	        }
	    }
	    ChildToDelete.return = null;
	    ChildToDelete.child = null;
	}
	function commitNestedComponent(root, onCommitUnmount) {
	    let node = root;
	    while (true) {
	        onCommitUnmount(node);
	        if (node.child !== null) {
	            // 向下遍历的过程
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === root) {
	            // 中止条件
	            return;
	        }
	        while (node.sibling === null) {
	            if (node.return === null || node.return === root) {
	                return;
	            }
	            node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	const commitPlacement = (finshedWork) => {
	    // parent Dom
	    {
	        console.warn('执行Placement操作', finshedWork);
	    }
	    const hostParent = getHostParent(finshedWork);
	    //host sibing
	    const sibling = getHostSibling(finshedWork);
	    // finishedWork ~ Dom append parentDom
	    if (hostParent !== null) {
	        insertOrAppendPlacementNodeIntoContainer(finshedWork, hostParent, sibling);
	    }
	};
	function getHostSibling(fiber) {
	    let node = fiber;
	    findSibing: while (true) {
	        while (node.sibling === null) {
	            const parent = node.return;
	            if (parent === null ||
	                parent.tag === HostComponent ||
	                parent.tag === HostRoot) {
	                return null;
	            }
	            node = parent;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	        while (node.tag !== HostText && node.tag !== HostComponent) {
	            // 向下遍历
	            if ((node.flags & Placement) !== NoFlags) {
	                continue findSibing;
	            }
	            if (node.child === null) {
	                continue findSibing;
	            }
	            else {
	                node.child.return = node;
	                node = node.child;
	            }
	            if ((node.flags & Placement) === NoFlags) {
	                return node.stateNode;
	            }
	        }
	    }
	}
	function getHostParent(fiber) {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('未找到HostParent');
	    }
	    return null;
	}
	function insertOrAppendPlacementNodeIntoContainer(finshedWork, hostParent, before) {
	    if (finshedWork.tag === HostComponent || finshedWork.tag === HostText) {
	        if (before) {
	            insertChildToContainer(finshedWork.stateNode, hostParent, before);
	        }
	        appendChildToContainer(finshedWork.stateNode, hostParent);
	        return;
	    }
	    const child = finshedWork.child;
	    if (child !== null) {
	        insertOrAppendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling; // 对child的sibling 的情况是什么    xxx  这里有一个思考是fragment 但是不确定 后续还需要思考
	        while (sibling) {
	            insertOrAppendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	}
	// export const commitMutationEffects = (
	// 	finishedWork: FiberNode,
	// 	root: FiberRootNode
	// ) => {
	// 	nextEffect = finishedWork;
	// 	while (nextEffect !== null) {
	// 		const child: FiberNode | null = nextEffect.child;
	// 		if (
	// 			(nextEffect.subtreeFlags & (MutationMask | PassiveMask)) !== NoFlags &&
	// 			child !== null
	// 		) {
	// 			nextEffect = child;
	// 		} else {
	// 			// 向上遍历 DFS
	// 			up: while (nextEffect !== null) {
	// 				commitMutationEffectsOnFiber(nextEffect, root); // 思考 这里不会重复处理同一个节点么  父节点，父节点下面的节点 可能会同时操作
	// 				const sibling: FiberNode | null = nextEffect.sibling;
	// 				if (sibling !== null) {
	// 					// 这个属于什么情况
	// 					nextEffect = sibling;
	// 					break up;
	// 				}
	// 				nextEffect = nextEffect.return;
	// 			}
	// 		}
	// 	}
	// };

	function markRef(fiber) {
	    fiber.flags |= Ref;
	}
	function markUpdate(fiber) {
	    fiber.flags |= Update;
	}
	const completeWork = (wip) => {
	    // 递归中的归
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostComponent:
	            if (current !== null && wip.stateNode) {
	                // update
	                //props是否变化
	                //变了 Update flag
	                updateFiberProps(wip.stateNode, newProps);
	                // 标记Ref
	                if (current.ref !== wip.ref) {
	                    markRef(wip);
	                }
	            }
	            else {
	                //mount
	                // 1.构建DOM
	                const instance = createInstance(wip.type, newProps);
	                // 2. 将DOM插入到DOM树中
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	                // 标记Ref
	                if (wip.ref !== null) {
	                    markRef(wip);
	                }
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            if (current !== null && wip.stateNode) {
	                const oldText = current.memoizedProps?.content;
	                const newText = newProps.content;
	                if (oldText !== newText) {
	                    markUpdate(wip);
	                }
	            }
	            else {
	                const instance = createTextInstance(newProps.content);
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	                bubbleProperties(wip);
	                return null;
	            }
	            break;
	        case HostRoot:
	            bubbleProperties(wip);
	            return null;
	        case FunctionComponent:
	            bubbleProperties(wip);
	            return null;
	        case Fragment:
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.warn('未处理的completeWork情况', wip);
	            }
	    }
	    return null;
	};
	function appendAllChildren(parent, wip) {
	    let node = wip.child;
	    while (node !== null) {
	        if (node.tag === HostComponent || node.tag === HostText) {
	            appendInitialChild(parent, node?.stateNode);
	        }
	        else if (node.child !== null) {
	            // 针对 react组件来写的  要拿到child
	            node.child.return = node;
	            node = node.child; // 得到单个的Dom，而非函数组件名
	            continue;
	        }
	        if (node === wip) {
	            return;
	        }
	        while (node.sibling === null) {
	            // 字类的层级查找完毕 该向上回去
	            if (node.return === null || node.return === wip) {
	                return;
	            }
	            node = node?.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	function bubbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	let syncQueue = null;
	let isFlushingSyncQueue = false;
	function scheduleSyncCallback(callback) {
	    if (syncQueue === null) {
	        syncQueue = [callback];
	    }
	    else {
	        syncQueue.push(callback);
	    }
	}
	function flushSyncCallbacks() {
	    if (!isFlushingSyncQueue && syncQueue) {
	        isFlushingSyncQueue = true;
	        try {
	            syncQueue.forEach((callback) => callback());
	        }
	        catch (e) {
	            {
	                console.error('flushSyncCallbacks报错', e);
	            }
	        }
	        finally {
	            isFlushingSyncQueue = false;
	            syncQueue = null;
	        }
	    }
	}

	let workInProgress = null;
	let wipRootRenderLane = NoLane;
	let rootDoesHasPassiveEffect = false;
	const RootInComplete = 1; // 中断
	const RootCompleted = 2; // 执行完毕
	// 执行过程中报错了
	function prepareFreshStack(root, lane) {
	    root.finishedLane = NoLane;
	    root.finishedWork = null;
	    workInProgress = createWorkInProcess(root.current, {});
	    wipRootRenderLane = lane;
	}
	// 找到根节点 调用renderRoot方法
	function scheduleUpdateOnFiber(fiber, lane) {
	    // 调度功能
	    const root = markUpdateFromFiberToRoot(fiber);
	    markRootUpdated(root, lane);
	    ensureRootIsScheduled(root);
	}
	// 调度阶段入口
	function ensureRootIsScheduled(root) {
	    const updateLane = getHighestPriorityLane(root.pendingLanes);
	    const existingCallback = root.callbackNode;
	    if (updateLane === NoLane) {
	        if (existingCallback !== null) {
	            scheduler.unstable_cancelCallback(existingCallback);
	        }
	        root.callbackNode = null;
	        root.callbakcPriority = NoLane;
	        return;
	    }
	    const curPriorty = updateLane;
	    const prevPriority = root.callbakcPriority;
	    if (curPriorty === prevPriority) {
	        return;
	    }
	    if (existingCallback !== null) {
	        scheduler.unstable_cancelCallback(existingCallback);
	    }
	    let newCallbackNode = null;
	    {
	        console.log(`在${updateLane === SyncLane ? '微' : '宏'}任务中调度，优先级`, updateLane);
	    }
	    if (updateLane === SyncLane) {
	        //同步优先级 用微任务调度
	        scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
	        scheduleMicroTask(flushSyncCallbacks);
	    }
	    else {
	        // 其他优先级 用宏任务调度
	        const schedulerPriority = lanesToSchedulerPriority(updateLane);
	        newCallbackNode = scheduler.unstable_scheduleCallback(schedulerPriority, 
	        //@ts-ignore
	        performConcurrentWorkOnRoot.bind(null, root));
	    }
	    root.callbackNode = newCallbackNode;
	    root.callbakcPriority = curPriorty;
	}
	function markRootUpdated(root, lane) {
	    root.pendingLanes = mergeLanes(root.pendingLanes, lane);
	}
	function markUpdateFromFiberToRoot(fiber) {
	    // 找到当前节点的根  及 FiberRootNode
	    let node = fiber;
	    let parent = node.return;
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}
	function performConcurrentWorkOnRoot(root, didTimeout) {
	    // 保证useEffect回调执行
	    const curCallback = root.callbackNode;
	    const didFlashPassiveEffect = flushPassiveEffects(root.pendingPassiveEffects);
	    if (didFlashPassiveEffect) {
	        if (root.callbackNode !== curCallback) {
	            return null;
	        }
	    }
	    const lane = getHighestPriorityLane(root.pendingLanes);
	    const curCallbackNode = root.callbackNode;
	    if (lane === NoLane) {
	        return null;
	    }
	    const needSync = lane === SyncLane || didTimeout;
	    //render 阶段
	    const exitStatus = renderRoot(root, lane, !needSync);
	    ensureRootIsScheduled(root);
	    if (exitStatus === RootInComplete) {
	        // 中断
	        if (root.callbackNode !== curCallbackNode) {
	            return null;
	        }
	        return performConcurrentWorkOnRoot.bind(null, root);
	    }
	    if (exitStatus === RootCompleted) {
	        const finishedWork = root.current.alternate;
	        root.finishedWork = finishedWork;
	        root.finishedLane = lane;
	        wipRootRenderLane = NoLane;
	        // wip
	        commitRoot(root);
	    }
	    else {
	        console.error('还未实现并发更新结束状态');
	    }
	}
	function performSyncWorkOnRoot(root) {
	    const nextLane = root.pendingLanes;
	    if (nextLane !== SyncLane) {
	        //其他比SyncLane底的优先级
	        // Nolane
	        ensureRootIsScheduled(root);
	        return;
	    }
	    const exitStatus = renderRoot(root, nextLane, false);
	    if (exitStatus === RootCompleted) {
	        const finishedWork = root.current.alternate;
	        root.finishedWork = finishedWork;
	        root.finishedLane = nextLane;
	        wipRootRenderLane = NoLane;
	        // wip
	        commitRoot(root);
	    }
	    else {
	        console.error('还未实现同步更新结束状态');
	    }
	}
	function renderRoot(root, lane, shouldTimeSlice) {
	    {
	        console.log(`开始${shouldTimeSlice ? '并发' : '同步'}更新`, root);
	    }
	    if (wipRootRenderLane !== lane) {
	        // 初始化 ---》当前workInProgress指向
	        prepareFreshStack(root, lane); // 并非每次调用都要初始化 因为存在 中断后又继续的情况，这里我们判断一下 若与当前lane 不同，我们在调用
	    }
	    do {
	        try {
	            shouldTimeSlice ? workLoopConcurrent() : workLoopSync();
	            break;
	        }
	        catch (e) {
	            {
	                console.warn('workLoop发生错误', e);
	            }
	            workInProgress = null;
	        }
	    } while (true);
	    // 中断执行/render阶段执行完
	    if (shouldTimeSlice && workInProgress !== null) {
	        return RootInComplete;
	    }
	    // render阶段执行完
	    if (!shouldTimeSlice && workInProgress !== null && true) {
	        console.error(`render阶段结束时wip不应该不是null`);
	    }
	    // TODO 报错
	    return RootCompleted;
	}
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.log('commit阶段开始', finishedWork);
	    }
	    const lane = root.finishedLane;
	    if (lane === NoLane && true) {
	        console.error('commit阶段finishedLane不应该是Nolane');
	    }
	    // 重置
	    root.finishedWork = null;
	    root.finishedLane = NoLane;
	    markRootFinished(root, lane);
	    if ((finishedWork.flags & PassiveMask) !== NoFlags ||
	        (finishedWork.subtreeFlags & PassiveMask) !== NoFlags) {
	        if (!rootDoesHasPassiveEffect) {
	            rootDoesHasPassiveEffect = true;
	            //调度副作用
	            scheduler.unstable_scheduleCallback(scheduler.unstable_NormalPriority, () => {
	                //执行副作用
	                flushPassiveEffects(root.pendingPassiveEffects);
	                return;
	            });
	        }
	    }
	    // 判断是否存在三个子阶段需要执行的操作
	    // root flags root subtreeFlags
	    const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffect || rootHasEffect) {
	        // beforeMutation
	        // mutation Placement
	        commitMutationEffects(finishedWork, root);
	        // Fiber Tree切换
	        root.current = finishedWork;
	        // Layout
	        commitLayoutEffects(finishedWork, root);
	    }
	    else {
	        root.current = finishedWork;
	    }
	    rootDoesHasPassiveEffect = false;
	    ensureRootIsScheduled(root);
	}
	function workLoopSync() {
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	}
	function workLoopConcurrent() {
	    while (workInProgress !== null && !scheduler.unstable_shouldYield()) {
	        performUnitOfWork(workInProgress);
	    }
	}
	function performUnitOfWork(fiber) {
	    const next = beginWork(fiber, wipRootRenderLane);
	    fiber.memoizedProps = fiber.pendingProps; // 为什么搞一个memoizedProps
	    if (next === null) {
	        completeUnitOfWork(fiber);
	    }
	    else {
	        workInProgress = next;
	    }
	}
	function flushPassiveEffects(pendingPassiveEffects) {
	    // 判断当前是否有回调
	    let didFlashPassiveEffect = false;
	    pendingPassiveEffects.unmount.forEach((effect) => {
	        didFlashPassiveEffect = true;
	        commitHookEffectListUnmount(Passive, effect);
	    });
	    pendingPassiveEffects.unmount = [];
	    pendingPassiveEffects.update.forEach((effect) => {
	        didFlashPassiveEffect = true;
	        commitHookEffectListDestory(Passive | HookHasEffect, effect);
	    });
	    pendingPassiveEffects.update.forEach((effect) => {
	        didFlashPassiveEffect = true;
	        commitHookEffectListCreate(Passive | HookHasEffect, effect);
	    });
	    pendingPassiveEffects.update = [];
	    flushSyncCallbacks();
	    return didFlashPassiveEffect;
	}
	function completeUnitOfWork(fiber) {
	    // 没有子节点 遍历兄弟节点
	    let node = fiber;
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            workInProgress = sibling;
	            return;
	        }
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	}

	// 创建 FiberRootNode 和 HostRootFiber 并返回FiberRootNode
	function createContainer(container) {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null); // 谁才是FiberRootNode  我先前的理解是 hostRootFiber是根节点 错了 root才是 ，他是根节点的引用
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue(); // 创建更新队列
	    return root;
	}
	// 建立 FiberRootNode 和 HostRootFiber 的关系并 创建更新队列
	function updateContainer(element, root) {
	    scheduler.unstable_runWithPriority(scheduler.unstable_ImmediatePriority, () => {
	        const hostRootFiber = root.current;
	        const lane = requestUpdateLane();
	        const update = createUpdate(element, lane); // 创建更新操作 element： 标签/State/State方法
	        enqueueUpdate(
	        // 添加到队列中
	        hostRootFiber.updateQueue, update);
	        scheduleUpdateOnFiber(hostRootFiber, lane); // hostRootFiber是
	    });
	    return element;
	}
	// 写下流程
	// 首先 Fiber双缓存
	//  有current / workinprcess
	//  预备工作  更新-----》   react18中 更新机制由setState发生变化 也有 Dom生变化 （类组件/函数组件）  我需要同一一个入口可以修改他们
	//   对于函数和state 我拿到的就是值  对于element  我直接拿到element用于获取Dom去生成workinprocess树---》 用于挂载和更新机制
	//  创建更新队列，更新方法
	//  创建 HostFiberNode/RootFiberNode
	//  创建workinProcess
	//  联系起来 调用rootRender方法
	//  进入beginWork
	// 判断类型 HostFiberNode / HostComponent/ HostText
	//  beginWork来生成workinprocess树  找孩子 建立关系  mount时候要挂载 需要赋值操作类型
	//  HostFiberNode进入的时候由current 进入的是update逻辑（通过类型判断） 会给予placement操作，故mount的挂载实现
	//  其他类型fiber进入的时候根据子孩子的element生成Fiber 建立联系， text进入说明结束流程 开始归阶段处理

	function createRoot(container) {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            initEvent(container, 'click');
	            return updateContainer(element, root);
	        },
	    };
	}

	var RactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return RactDOM;

}));

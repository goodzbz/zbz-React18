(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
	typeof define === 'function' && define.amd ? define(['react'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.testUtils = global.testUtils || {}, global.testUtils.js = factory(global.React)));
})(this, (function (React) { 'use strict';

	function _interopNamespaceDefault(e) {
		var n = Object.create(null);
		if (e) {
			Object.keys(e).forEach(function (k) {
				if (k !== 'default') {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		}
		n.default = e;
		return Object.freeze(n);
	}

	var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

	const FunctionComponent = 0; //FunctionComponent（函数组件）
	const HostRoot = 3; //根组件 React顶层
	const HostComponent = 5; //原生组件 div/p/span
	const HostText = 6; //文本节点

	const NoFlags = 0b0000000;
	const Placement = 0b0000001;
	const Update = 0b0000010;
	const ChildDeletion = 0b0000100;
	// export const NoFlags = 0b00000000000000000000000000;
	// export const Placement = 0b00000000000000000000000010;
	// export const Update = 0b00000000000000000000000100;
	// export const ChildDeletion = 0b00000000000000000000010000;
	const MutationMask = Placement | Update | ChildDeletion;

	//ReactElement 数据--》 FiberNode 数据+关系 ----> 真实Dom
	//FiberNode
	class FiberNode {
	    type;
	    tag; // 类型标记
	    pendingProps;
	    key;
	    stateNode; // HostRootFiber stateNode指向FiberRootNode/ 类组件为该组件实例/ 原生Dom元素是Dom节点的引用
	    return; //父亲
	    sibling; //兄弟
	    child; //儿子
	    index; //儿子标号
	    ref;
	    flags; // 操作标记
	    memoizedState;
	    updateQueue;
	    subtreeFlags;
	    memoizedProps;
	    alternate;
	    deletions;
	    constructor(tag, pendingProps, key) {
	        this.tag = tag;
	        this.key = key;
	        this.stateNode = null; //(DOM)
	        this.type = null; //(FunctionComponent)
	        //生成树状结构
	        this.return = null;
	        this.sibling = null;
	        this.child = null;
	        this.index = 0;
	        this.ref = null;
	        //作为工作单元
	        this.pendingProps = pendingProps;
	        this.memoizedProps = null;
	        this.updateQueue = null;
	        this.memoizedState = null;
	        this.alternate = null;
	        //副作用
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	        this.deletions = null;
	    }
	}
	//tag  FiberNode属于xx类型节点
	// FiberRootNode        根--》HostRootFiber ---》 app（一代标签）
	class FiberRootNode {
	    container;
	    current;
	    finishedWork; //指向更新完成的hostRootFiber
	    constructor(container, hostRootFiber) {
	        //container 是元素  hostRootFiber
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	const createWorkInProcess = (current, pendingProps) => {
	    let wip = current.alternate;
	    if (wip === null) {
	        //mount
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        // 为什么更新的时候要这么设计
	        //update   更新不应该是很多东西都发生变化么
	        wip.pendingProps = pendingProps;
	        wip.flags = NoFlags;
	        wip.subtreeFlags = NoFlags;
	        wip.deletions = null;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memoizedState = current.memoizedState;
	    wip.memoizedProps = current.memoizedProps;
	    return wip;
	};
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('为定义的type类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}
	// type 属性表示组件节点的类型。对于不同类型的组件或元素，type 可以是以下几种取值：
	// 函数组件：函数本身，即函数组件的定义。
	// 类组件：类本身，即组件的构造函数。
	// 原生 DOM 元素：字符串，表示对应的 HTML 标签名称。
	// tag 属性表示 Fiber 节点的标记信息，用于指示该节点的特定类型和状态，如：
	// HostComponent：原生 DOM 元素节点。
	// ClassComponent：类组件节点。
	// FunctionComponent：函数组件节点。
	// HostRoot：根节点。
	// HostText：文本节点。
	// tag 属性更多地用于标识节点的内部类型和处理逻辑，而 type 属性则更加关注组件节点的具体类型。它们在 React 的协调和渲染过程中扮演着不同的角色

	// 创建更新操作
	const createUpdate = (action) => {
	    return {
	        action,
	    };
	};
	const createUpdateQueue = () => {
	    // 创建更新队列
	    return {
	        shared: {
	            pending: null,
	        },
	        dispatch: null,
	    };
	};
	// 添加更新操作
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	};
	//消费更新操作
	const processUpdataQueue = (baseState, pendingUpdate) => {
	    const result = {
	        memoizedState: baseState,
	    };
	    if (pendingUpdate !== null) {
	        const action = pendingUpdate.action;
	        if (action instanceof Function) {
	            result.memoizedState = action(baseState);
	        }
	        else {
	            result.memoizedState = action;
	        }
	    }
	    return result;
	};

	// $$typeof是独一无二的值，所以我们这里使用Symbols
	const supportSymbol = typeof Symbol == 'function' && Symbol;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	//生成子节点 标记的过程
	function ChildReconciler(shouldTrackEffect) {
	    function deleteChild(returnFiber, childToDelete) {
	        if (!shouldTrackEffect) {
	            return;
	        }
	        const deletions = returnFiber.deletions;
	        if (deletions === null) {
	            returnFiber.deletions = [childToDelete];
	            returnFiber.flags |= ChildDeletion;
	        }
	        else {
	            deletions.push(childToDelete);
	        }
	    }
	    function reconcileSingleElement(returnFiber, currentFiber, element) {
	        const key = element.key;
	        work: if (currentFiber !== null) {
	            if (currentFiber.key === key) {
	                //key相同
	                if (element.$$typeof === REACT_ELEMENT_TYPE) {
	                    if (currentFiber.type === element.type) {
	                        //type相同
	                        const existing = useFiber(currentFiber, element.props);
	                        existing.return = returnFiber;
	                        return existing;
	                    }
	                    //删除旧的
	                    deleteChild(returnFiber, currentFiber);
	                    break work;
	                }
	                else {
	                    {
	                        console.warn('还未实现的react类型', element);
	                        break work;
	                    }
	                }
	            }
	            else {
	                //删掉旧的
	                deleteChild(returnFiber, currentFiber);
	            }
	        }
	        // 根据element 创建Fiber并返回
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        if (currentFiber !== null) {
	            //update
	            if (currentFiber.tag === HostText) {
	                //类型没变 可以复用
	                const existing = useFiber(currentFiber, { content });
	                existing.return = returnFiber;
	                return existing;
	            }
	            deleteChild(returnFiber, currentFiber);
	        }
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function placeSingleChild(fiber) {
	        if (shouldTrackEffect && fiber.alternate === null) {
	            //首次渲染
	            fiber.flags |= Placement;
	            console.log(fiber.flags);
	        }
	        return fiber;
	    }
	    return function reconcilerChildFibers(returnFiber, currentFiber, newChild) {
	        if (typeof newChild === 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('为实现的reconcile类型', newChild);
	                    }
	            }
	        }
	        //TODO 多节点的情况 ul> li*3
	        //HostText
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        //兜底删除
	        if (currentFiber !== null) {
	            deleteChild(returnFiber, currentFiber);
	        }
	        {
	            console.warn('未实现的reconcile类型', newChild);
	        }
	        return null;
	    };
	}
	function useFiber(fiber, pendingProps) {
	    const clone = createWorkInProcess(fiber, pendingProps);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	}
	const reconcileChildFibers = ChildReconciler(true);
	const mountChildFibers = ChildReconciler(false);

	const internals = React__namespace.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	let currentlyRenderingFiber = null;
	let workInProgressHook = null;
	let currentHook = null;
	const { currentDispatcher } = internals;
	function renderWithHooks(wip) {
	    // 赋值操作
	    currentlyRenderingFiber = wip;
	    // 重置
	    wip.memoizedState = null;
	    if (wip.alternate !== null) {
	        //update
	        currentDispatcher.current = HooksDispatcherOnUpdate;
	    }
	    else {
	        //mount
	        currentDispatcher.current = HooksDispatcherOnMount;
	    }
	    const Component = wip.type;
	    const props = wip.pendingProps;
	    const children = Component(props);
	    //重置操作
	    currentlyRenderingFiber = null;
	    return children;
	}
	const HooksDispatcherOnMount = {
	    useState: mountState,
	};
	const HooksDispatcherOnUpdate = {
	    useState: updateState,
	};
	function updateState(initialState) {
	    //找到当前useState对应的hook数据
	    const hook = updateWorkInProgressHook();
	    // 计算新state的逻辑
	    const queue = hook.updateQueue;
	    const pending = queue.shared.pending;
	    if (pending !== null) {
	        const { memoizedState } = processUpdataQueue(hook.memoizedState, pending);
	        hook.memoizedState = memoizedState;
	    }
	    return [hook.memoizedState, queue.dispatch];
	}
	function mountState(initialState) {
	    //
	    const hook = mountWorkInProgressHook();
	    let memoizedState;
	    if (initialState instanceof Function) {
	        memoizedState = initialState();
	    }
	    else {
	        memoizedState = initialState;
	    }
	    const queue = createUpdateQueue();
	    hook.updateQueue = queue;
	    hook.memoizedState = memoizedState;
	    // @ts-ignore
	    const dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
	    queue.dispatch = dispatch;
	    return [memoizedState, dispatch];
	}
	function dispatchSetState(fiber, updateQueue, action) {
	    const update = createUpdate(action);
	    enqueueUpdate(updateQueue, update);
	    scheduleUpdateOnFiber(fiber);
	}
	function mountWorkInProgressHook() {
	    const hook = {
	        memoizedState: null,
	        updateQueue: null,
	        next: null,
	    };
	    if (workInProgressHook == null) {
	        if (currentlyRenderingFiber === null) {
	            throw new Error('请在函数组件内调用hook');
	        }
	        else {
	            workInProgressHook = hook;
	            currentlyRenderingFiber.memoizedState = workInProgressHook;
	        }
	    }
	    else {
	        // mount时 后续的hook
	        workInProgressHook.next = hook;
	        workInProgressHook = hook;
	    }
	    return workInProgressHook;
	}
	function updateWorkInProgressHook() {
	    //TODO render阶段触发的更新
	    let nextCurrentHook;
	    if (currentHook === null) {
	        //这是这个FC update时候的第一个hook
	        const current = currentlyRenderingFiber?.alternate;
	        if (current !== null) {
	            nextCurrentHook = current?.memoizedState;
	        }
	        else {
	            nextCurrentHook = null;
	        }
	    }
	    else {
	        // 这个FCupdate时 后续的hook
	        nextCurrentHook = currentHook.next;
	    }
	    if (nextCurrentHook === null) {
	        throw new Error(`组件${currentlyRenderingFiber?.type}本次执行时候的Hook比上次执行的多`);
	    }
	    currentHook = nextCurrentHook;
	    const newHook = {
	        memoizedState: currentHook.memoizedState,
	        updateQueue: currentHook.updateQueue,
	        next: null,
	    };
	    if (workInProgressHook == null) {
	        if (currentlyRenderingFiber === null) {
	            throw new Error('请在函数组件内调用hook');
	        }
	        else {
	            workInProgressHook = newHook;
	            currentlyRenderingFiber.memoizedState = workInProgressHook;
	        }
	    }
	    else {
	        // mount时 后续的hook
	        workInProgressHook.next = newHook;
	        workInProgressHook = newHook;
	    }
	    return workInProgressHook;
	}

	//递归阶段中的递阶段
	const beginWork = (wip) => {
	    //比较,返回子fiberNode
	    switch (wip.tag) {
	        case HostRoot:
	            return updateHostRoot(wip);
	        case HostComponent:
	            return updateHostComponent(wip);
	        case HostText:
	            return null;
	        case FunctionComponent:
	            return updateFunctionComponent(wip);
	        default:
	            {
	                console.warn('beginWork未实现的类型');
	            }
	    }
	    return null;
	};
	function updateFunctionComponent(wip) {
	    const nextChildren = renderWithHooks(wip); //修改
	    reconcileChildren(wip, nextChildren); //返回子FiberNode
	    return wip.child;
	}
	function updateHostRoot(wip) {
	    const baseState = wip.memoizedState;
	    const updateQueue = wip.updateQueue;
	    const pending = updateQueue.shared.pending;
	    updateQueue.shared.pending = null;
	    const { memoizedState } = processUpdataQueue(baseState, pending);
	    //null
	    wip.memoizedState = memoizedState;
	    const nextChildren = wip.memoizedState;
	    reconcileChildren(wip, nextChildren); //返回子FiberNode
	    return wip.child;
	}
	function updateHostComponent(wip) {
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children; //修改
	    reconcileChildren(wip, nextChildren); //返回子FiberNode
	    return wip.child;
	}
	function reconcileChildren(wip, children) {
	    const current = wip.alternate;
	    if (current !== null) {
	        //update
	        wip.child = reconcileChildFibers(wip, current?.child, children);
	    }
	    else {
	        //mount
	        wip.child = mountChildFibers(wip, null, children);
	    }
	}

	const createInstance = (type) => {
	    const element = document.createElement(type);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	    console.log(parent);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};

	function markUpdate(fiber) {
	    fiber.flags |= Update;
	}
	const completeWork = (wip) => {
	    //递归中的归
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostComponent:
	            if (current !== null && wip.stateNode) ;
	            else {
	                //1.构建DOM
	                const instance = createInstance(wip.type);
	                //2. 将DOM插入到DOM树中
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            if (current !== null && wip.stateNode) {
	                const oldText = current.memoizedProps.content;
	                const newText = newProps.content;
	                if (oldText !== newText) {
	                    markUpdate(wip);
	                }
	            }
	            else {
	                const instance = createTextInstance(newProps.content);
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	                bubbleProperties(wip);
	                return null;
	            }
	        case HostRoot:
	            bubbleProperties(wip);
	            return null;
	        case FunctionComponent:
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.warn('未处理的completeWork情况', wip);
	            }
	    }
	    return null;
	};
	function appendAllChildren(parent, wip) {
	    let node = wip.child;
	    while (node !== null) {
	        if (node.tag === HostComponent || node.tag === HostText) {
	            appendInitialChild(parent, node?.stateNode);
	        }
	        else if (node.child !== null) {
	            node.child.return = node;
	            node = node.child; //得到单个的Dom，而非函数组件名
	            continue;
	        }
	        if (node === wip) {
	            return;
	        }
	        while (node.sibling == null) {
	            if (node.return === null || node.return === wip) {
	                return;
	            }
	            node = node?.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	function bubbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	let workInProgress = null;
	function prepareFreshStack(root) {
	    workInProgress = createWorkInProcess(root.current, {});
	}
	// 找到根节点 调用renderRoot方法
	function scheduleUpdateOnFiber(fiber) {
	    //调度功能
	    const root = markUpdateFromFiberToRoot(fiber);
	    renderRoot(root);
	}
	function markUpdateFromFiberToRoot(fiber) {
	    //找到当前节点的根  及 FiberRootNode
	    let node = fiber;
	    let parent = node.return;
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}
	function renderRoot(root) {
	    //初始化 ---》当前workInProgress指向
	    prepareFreshStack(root);
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (e) {
	            {
	                console.warn('workLoop发生错误', e);
	            }
	            workInProgress = null;
	        }
	    } while (true); //为什么try catch 为是什么两层循环
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    // wip
	    commitRoot(root);
	}
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.log('commit阶段开始', finishedWork);
	    }
	    //重置
	    root.finishedWork = null;
	    //判断是否存在三个子阶段需要执行的操作
	    //root flags root subtreeFlags
	    const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffect || rootHasEffect) {
	        root.current = finishedWork;
	        //layout
	    }
	    else {
	        root.current = finishedWork;
	    }
	}
	function workLoop() {
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	}
	function performUnitOfWork(fiber) {
	    const next = beginWork(fiber);
	    fiber.memoizedProps = fiber.pendingProps; // 为什么搞一个memoizedProps
	    if (next === null) {
	        completeUnitOfWork(fiber);
	    }
	    else {
	        workInProgress = next;
	    }
	}
	function completeUnitOfWork(fiber) {
	    // 没有子节点 遍历兄弟节点
	    let node = fiber;
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            workInProgress = sibling;
	            return;
	        }
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	}

	//创建 FiberRootNode 和 HostRootFiber 并返回FiberRootNode
	function createContainer(container) {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null); // 谁才是FiberRootNode  我先前的理解是 hostRootFiber是根节点 错了 root才是 ，他是根节点的引用
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue(); // 创建更新队列
	    return root;
	}
	// 建立 FiberRootNode 和 HostRootFiber 的关系并 创建更新队列
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    const update = createUpdate(element); //创建更新操作 element： 标签/State/State方法
	    enqueueUpdate(
	    // 添加到队列中
	    hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber); // hostRootFiber是
	    return element;
	}
	// 写下流程
	// 首先 Fiber双缓存
	//  有current / workinprcess
	//  预备工作  更新-----》   react18中 更新机制由setState发生变化 也有 Dom生变化 （类组件/函数组件）  我需要同一一个入口可以修改他们
	//   对于函数和state 我拿到的就是值  对于element  我直接拿到element用于获取Dom去生成workinprocess树---》 用于挂载和更新机制
	//  创建更新队列，更新方法
	//  创建 HostFiberNode/RootFiberNode
	//  创建workinProcess
	//  联系起来 调用rootRender方法
	//  进入beginWork
	// 判断类型 HostFiberNode / HostComponent/ HostText
	//  beginWork来生成workinprocess树  找孩子 建立关系  mount时候要挂载 需要赋值操作类型
	//  HostFiberNode进入的时候由current 进入的是update逻辑（通过类型判断） 会给予placement操作，故mount的挂载实现
	//  其他类型fiber进入的时候根据子孩子的element生成Fiber 建立联系， text进入说明结束流程 开始归阶段处理

	function createRoot(container) {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            return updateContainer(element, root);
	        },
	    };
	}

	var RactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return RactDOM;

}));
